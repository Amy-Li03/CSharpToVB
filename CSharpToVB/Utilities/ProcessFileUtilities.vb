' Licensed to the .NET Foundation under one or more agreements.
' The .NET Foundation licenses this file to you under the MIT license.
' See the LICENSE file in the project root for more information.

Imports System.IO
Imports System.Threading
Imports CSharpToVBConverter
Imports Microsoft.CodeAnalysis

#If Not NET Then

Imports VBMsgBox

#End If

Module ProcessFileUtilities

    ''' <summary>
    ''' Convert one file
    ''' </summary>
    ''' <param name="MainForm"></param>
    ''' <param name="SourceFileNameWithPath">Complete path including file name to file to be converted</param>
    ''' <param name="TargetDirectory">Complete path up to File to be converted</param>
    ''' <param name="SourceLanguageExtension">vb or cs</param>
    ''' <param name="CSPreprocessorSymbols"></param>
    ''' <param name="VBPreprocessorSymbols"></param>
    ''' <param name="OptionalReferences"></param>
    ''' <param name="SkipAutoGenerated"></param>
    ''' <param name="CancelToken"></param>
    ''' <returns>False if error and user wants to stop, True if success or user wants to ignore error.</returns>
    Friend Async Function ProcessFileAsync(MainForm As Form1, SourceFileNameWithPath As String, TargetDirectory As String, SourceLanguageExtension As String, CSPreprocessorSymbols As List(Of String), VBPreprocessorSymbols As List(Of KeyValuePair(Of String, Object)), OptionalReferences() As MetadataReference, SkipAutoGenerated As Boolean, CancelToken As CancellationToken) As Task(Of Boolean)
        If My.Settings.IgnoreFileList.Contains(SourceFileNameWithPath) Then
            Return True
        End If
        MainForm.ButtonStopConversion.Visible = True
        MainForm.ConversionOutput.Text = ""
        mnuAddToMRU(My.Settings.MRU_Data, SourceFileNameWithPath)
        MainForm.UpdateLastFileMeus()
        FileMenuMRUUpdateUI(MainForm.mnuFile.DropDownItems, AddressOf MainForm.mnu_MRUList_Click)
        Dim lines As Integer = LoadInputBufferFromStream(MainForm, SourceFileNameWithPath)
        If lines > 0 Then
            Using textProgressBar As TextProgressBar = New TextProgressBar(MainForm.ConversionProgressBar)

                MainForm._requestToConvert = New ConvertRequest(SkipAutoGenerated, New Progress(Of ProgressReport)(AddressOf textProgressBar.Update), MainForm._cancellationTokenSource.Token) With {
                    .SourceCode = MainForm.ConversionInput.Text
                }
                If Not Await Convert_Compile_ColorizeAsync(MainForm, MainForm._requestToConvert, CSPreprocessorSymbols, VBPreprocessorSymbols, OptionalReferences, CancelToken).ConfigureAwait(True) Then
                    If MainForm._requestToConvert.CancelToken.IsCancellationRequested Then
                        MainForm.ConversionProgressBar.Value = 0
                        Return False
                    End If
                    Dim msgBoxResult As MsgBoxResult
                    If MainForm._doNotFailOnError Then
                        msgBoxResult = MsgBoxResult.Yes
                    Else
                        msgBoxResult = MsgBox($"Conversion failed, do you want to stop processing this file automatically in the future? Yes and No will continue processing files, Cancel will stop conversions!",
                                             MsgBoxStyle.YesNoCancel Or MsgBoxStyle.Exclamation Or MsgBoxStyle.MsgBoxSetForeground)
                    End If
                    Select Case msgBoxResult
                        Case MsgBoxResult.Cancel
                            MainForm._cancellationTokenSource.Cancel()
                            Return False
                        Case MsgBoxResult.No
                            Return True
                        Case MsgBoxResult.Yes
                            If Not My.Settings.IgnoreFileList.Contains(SourceFileNameWithPath) Then
                                My.Settings.IgnoreFileList.Add(SourceFileNameWithPath)
                                My.Settings.Save()
                            End If
                            MainForm.ListBoxErrorList.Items.Clear()
                            MainForm.LineNumbersForConversionInput.Visible = My.Settings.ShowSourceLineNumbers
                            MainForm.LineNumbersForConversionOutput.Visible = My.Settings.ShowDestinationLineNumbers
                            MainForm._doNotFailOnError = True
                            Return True
                    End Select
                Else
                    If Not String.IsNullOrWhiteSpace(TargetDirectory) Then
                        If MainForm._requestToConvert.CancelToken.IsCancellationRequested Then
                            Return False
                        End If
                        If MainForm.LabelErrorCount.Text = "File Skipped" Then
                            Return True
                        End If
                        Dim NewFileName As String = Path.ChangeExtension(New FileInfo(SourceFileNameWithPath).Name, If(SourceLanguageExtension = "vb", "cs", "vb"))
                        WriteTextToStream(TargetDirectory, NewFileName, MainForm.ConversionOutput.Text)
                    End If
                    If My.Settings.PauseConvertOnSuccess Then
                        If MsgBox($"{SourceFileNameWithPath} successfully converted, Continue?",
                                  MsgBoxStyle.YesNo Or MsgBoxStyle.Question Or MsgBoxStyle.MsgBoxSetForeground) = MsgBoxResult.No Then
                            Return False
                        End If
                    End If
                End If
            End Using
            ' 5 second delay
            Const LoopSleep As Integer = 25
            Dim Delay As Integer = (1000 * My.Settings.ConversionDelay) \ LoopSleep
            For index As Integer = 0 To Delay
                Application.DoEvents()
                Thread.Sleep(LoopSleep)
                If CancelToken.IsCancellationRequested Then
                    Return False
                End If
            Next
            Application.DoEvents()
        Else
            MainForm.ConversionOutput.Clear()
        End If
        Return True
    End Function

End Module
