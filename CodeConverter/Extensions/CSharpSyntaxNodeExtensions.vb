' Licensed to the .NET Foundation under one or more agreements.
' The .NET Foundation licenses this file to you under the MIT license.
' See the LICENSE file in the project root for more information.

Imports System.Runtime.CompilerServices
Imports System.Threading
Imports CSharpToVBCodeConverter.ToVisualBasic.CSharpConverter

Imports Microsoft.CodeAnalysis

Imports CS = Microsoft.CodeAnalysis.CSharp
Imports CSS = Microsoft.CodeAnalysis.CSharp.Syntax

Imports VB = Microsoft.CodeAnalysis.VisualBasic
Imports VBS = Microsoft.CodeAnalysis.VisualBasic.Syntax

Namespace CSharpToVBCodeConverter.ToVisualBasic

    Public Module CSharpSyntaxNodeExtensions

        <Extension>
        Friend Function DedupLeadingTrivia(node As CS.CSharpSyntaxNode, Keyword As SyntaxToken, Attributes As List(Of VBS.AttributeListSyntax), Modifiers As List(Of SyntaxToken)) As List(Of SyntaxTrivia)
            Dim NodeLeadingTrivia As New List(Of SyntaxTrivia)
            NodeLeadingTrivia.AddRange(ConvertTrivia(node.GetLeadingTrivia))
            If Attributes.Any Then
                If TriviaIsIdentical(Attributes(0).GetLeadingTrivia, NodeLeadingTrivia) Then
                    NodeLeadingTrivia.Clear()
                End If
            ElseIf Modifiers.Any Then
                If TriviaIsIdentical(Modifiers(0).LeadingTrivia, NodeLeadingTrivia) Then
                    NodeLeadingTrivia.Clear()
                End If
            ElseIf TriviaIsIdentical(Keyword.LeadingTrivia, NodeLeadingTrivia) Then
                NodeLeadingTrivia.Clear()
            End If

            Return NodeLeadingTrivia
        End Function

        <Extension>
        Friend Function IsNotInStructure(node As CS.CSharpSyntaxNode) As Boolean
            Dim StatementWithIssues As CS.CSharpSyntaxNode = node
            While StatementWithIssues IsNot Nothing
                If TypeOf StatementWithIssues Is CSS.StructDeclarationSyntax Then
                    Exit While
                End If

                StatementWithIssues = CType(StatementWithIssues.Parent, CS.CSharpSyntaxNode)
            End While
            If StatementWithIssues Is Nothing Then
                Return True
            End If

            Return False
        End Function

        ''' <summary>
        ''' Entry Point for converting source and new applications
        ''' </summary>
        ''' <param name="SourceTree"></param>
        ''' <param name="SkipAutoGenerated"></param>
        ''' <param name="DefaultVBOptions"></param>
        ''' <param name="pSemanticModel"></param>
        ''' <returns></returns>
        <Extension>
        Public Function DoConversion(SourceTree As CS.CSharpSyntaxNode, SkipAutoGenerated As Boolean, DefaultVBOptions As DefaultVBOptions, pSemanticModel As SemanticModel, ReportException As Action(Of Exception), Progress As IProgress(Of ProgressReport), CancelToken As CancellationToken) As VB.VisualBasicSyntaxNode
            IgnoredIfDepth = 0
            IfDepth = 0
            Dim visualBasicSyntaxNode1 As VB.VisualBasicSyntaxNode
            s_originalRequest = New ConvertRequest(SkipAutoGenerated, Progress, CancelToken)
            SyncLock s_thisLock
                ClearMarker()
                s_usedStacks.Push(s_usedIdentifiers)
                s_usedIdentifiers.Clear()
                visualBasicSyntaxNode1 = SourceTree?.Accept(New NodesVisitor(pSemanticModel, DefaultVBOptions, ReportException))
                If s_usedStacks.Count > 0 Then
                    s_usedIdentifiers = DirectCast(s_usedStacks.Pop, Dictionary(Of String, SymbolTableEntry))
                End If
            End SyncLock
            Return visualBasicSyntaxNode1
        End Function

    End Module
End Namespace
